#!/bin/sh

# Builds a student/team repository
#
# -R          don't resolve netid
# -c          clean build products from previous run
# -e          build Web Assembly using Emscripten

. "$(dirname "$0")/.CASS"
course_use find grade redact

process_args () {
    eval "$(getargs -Rce hw netid repo=)"
    netid=$(resolve_student ${flag_R:+-C} $netid)
    if [ -z "$repo" ]; then
        repo=$(find_team_repo $hw $netid)
    fi
    container=$(format_homework $hw)-$netid-build-$$

    # Preparation script can override this:
    export HOST_MAKE='make -rf .tester/Host_build_makefile'
    export TEST_HW=$hw
    export TEST_NETID=$netid
}

main () {
    process_args "$@"

    cd "$repo"
    lang=$(detect_language)

    rm -f build.log em-build.log

    case $lang$flag_e in
        (dssl2)
            touch build.log
            ;;
        (c|cxx)
            . $(find_homework_script $hw prepare) 2>build.log
            cat build.log >&2
            docker_start build "$container"
            ;;
        (*-e)
            ;;
    esac

    do_build
}

guest () {
    docker exec $CURRENT_BUILD_CONTAINER "$@"
}

save_warnings () {
    sed -E '
        /^(.+):[0-9]+:[0-9]+: (warning|error): .*/! d
        s//\1/
    ' "$1" | sort | uniq > "$2"

    if [ -z "$(cat "$2")" ]; then
        rm -f "$2"
    fi
}

restore_warnings () {
    test -f "$1" || return 0

    ${lang}_expand "$1" | while read _line; do
        touch -c "$_line"
    done
}

do_build () {
    if [ -n "$flag_e" ]
    then
        do_web_build
    else
        do_native_build
    fi
}

do_native_build () {
    clean_native_build
    restore_warnings .warnings
    ${lang}_redact $HOST_MAKE | tee -a build.log
    save_warnings build.log .warnings
    test -f .success
}

do_web_build () {
    clean_web_build

    local prefix=${EM_PREFIX:-/usr/local/asmjs-unknown-emscripten}
    local ge211=${GE211_DIR:-$prefix/src/dot-cs211/lib/ge211}
    local script=$ge211/scripts/emscripten_build.zsh

    rm -f 0play.hlog

    if TAG= cxx_redact "$script" -O2 | tee em-build.log
    then
        chmod -R a+rX build.em/html
        chmod a+x build.em . .. ../..

        rm -Rf play
        ln -sf build.em/html play

        sed 's/^ *|\?//' >0play.hlog <<........EOF
            <p class="html-only"
           |   style="font-size: 150%; margin: 4px auto; padding: 4px;
           |          text-align: center; color: white; background: black;">
           |  <a href="/gsc/play/$netid/$hw/">Play the game online</a>
            </p>
........EOF

    fi

    true
}

clean_native_build () {
    test -n "$flag_c" || return 0

    if [ -f CMakeLists.txt -a -d build ]; then
        guest cmake --build build --target clean
    else
        $HOST_MAKE clean
    fi
}

clean_web_build () {
    test -n "$flag_c" || return 0

    if [ -n "$flag_e" ]; then
        rm -Rf build.em
    fi
}

#########
main "$@"
#########
