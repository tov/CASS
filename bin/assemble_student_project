#!/bin/sh

# Assembles a student project from the starter code, student code,
# and tester.
#
# Additional arguments beyond `hw` and `dir` are the command to
# add the student code itself (usually a call to `gsc).

. "$(dirname "$0")/.CASS"

eval "$(getargs hw dir ...)"
course_use find publish

# Clears the GSC download cache.
clean_cache () {
    rm -Rf .cache
    mkdir .cache
    find . -type l ! -exec test -e {} \; -exec rm {} \;
}

# Saves the modification time of a file so we can restore it
# after modifying it.
save_mtime () {
    touch -r "$1" ".$1.mtime"
}

# Restores a file modification time previously saved by save_mtime.
restore_mtime () {
    touch -r ".$1.mtime" "$1"
    rm -f ".$1.mtime"
}

# Links the contents of the GSC download cache into the repo.
link_cache () {
    link_rel_rec .cache
}

# Creates relative symlinks, recursively.
link_rel_rec () {
    local src; src=$1
    local dst; dst=${2:-.}
    local ups; ups=$3
    local src_entry
    local dst_entry
    local newest

    for src_entry in "$src"/*; do
        dst_entry=$dst/${src_entry##*/}
        if [ -d "$src_entry" ]; then
            link_rel_rec "$src_entry" "$dst_entry" "../$ups"
            if newest=$(ls -At "$src_entry" 2>/dev/null | head -1); then
                touch -r "$src_entry/$newest" "$dst_entry"
            fi
        elif [ -e "$src_entry" ]; then
            mkdir -p "$dst"
            ln -sf "$ups$src_entry" "$dst"
            touch -hr "$src_entry" "$dst_entry"
        fi
    done
}

check_expected_files () {
    if [ -e Makefile ] || [ -e CMakeLists.txt ]; then
        return
    fi

    if [ "$1" = : ]; then
        return
    fi

    case $((hw)) in
        (1) check_file warmup.rkt ;;
    esac
}

check_file () {
    local src=.cache/src

    if [ -f ${src}/$1 ]; then
        return
    fi

    warn_missing_file $1

    mkdir -p ${src}
    rm -Rf .original
    mv ${src} .original
    mkdir ${src}

    find .original -type f -name '*.rkt' -print0 |
        xargs -0 cat > ${src}/$1
}

warn_missing_file () {
    echo >&4 "*** warning: missing $1"

    unindent . >>about.log <<-....EOF

        ************************************************************
        *** WARNING!
        ***
        *** File not found: $1
        ***
        *** This time I will try to find another file and rename
        *** it for you, but you should be sure to use the correct
        *** filename in future weeks.
        ************************************************************

....EOF
}


hw_base=$(find_homework $hw)

mkdir -p "$dir"
cd "$dir"

clean_cache
publish_dir -G "$hw_base/starter/"    "$dir"
publish_dir    "$COURSE_LIB/tester/"  "$dir/.tester/"
publish_dir    "$hw_base/tester/"     "$dir/.tester/"
"$@" .cache
check_expected_files "$*"
link_cache

if [ -f "$hw_base/starter/Makefile" ]; then
    rsync -t "$hw_base"/starter/Makefile .tester/Starter_makefile
fi

TESTER_LINE='include(.tester/Tester.cmake)'

if [ -e CMakeLists.txt ] && ! grep -sqF "$TESTER_LINE" CMakeLists.txt
then
    save_mtime CMakeLists.txt
    printf '\n\n%s\n' "$TESTER_LINE" >> CMakeLists.txt
    restore_mtime CMakeLists.txt
fi
